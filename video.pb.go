// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: ziyunix/core/video.proto

package core

import (
	media "github.com/storezhang/media"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 视频
type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 编码器
	// @gotags: default:"libx264"
	Codec string `protobuf:"bytes,3,opt,name=codec,proto3" json:"codec,omitempty" default:"libx264"`
	// 编码格式
	// @gotags: default:"3" validate:"required,oneof=3"
	Format media.Format `protobuf:"varint,4,opt,name=format,proto3,enum=storezhang.media.Format" json:"format,omitempty" default:"3" validate:"required,oneof=3"`
	// 码率
	// 单位：k
	// @gotags: default:"256"
	Bitrate int32 `protobuf:"zigzag32,6,opt,name=bitrate,proto3" json:"bitrate,omitempty" default:"256"`
	// 帧率
	// @gotags: default:"6" validate:"required"
	Framerate int32 `protobuf:"varint,7,opt,name=framerate,proto3" json:"framerate,omitempty" default:"6" validate:"required"`
	// 动态码率配置
	Quality *Quality `protobuf:"bytes,8,opt,name=quality,proto3" json:"quality,omitempty"`
	// 缓冲区，减少QMax和QMin的波动，取得更好的画质
	// 单位：k
	// @gotags: default:"128"
	Buffer int32 `protobuf:"varint,9,opt,name=buffer,proto3" json:"buffer,omitempty" default:"128"`
	// 分辨率
	// @gotags: default: 15
	Resolution media.Resolution `protobuf:"varint,14,opt,name=resolution,proto3,enum=storezhang.media.Resolution" json:"resolution,omitempty"`
	// 水印
	Watermark *Watermark `protobuf:"bytes,15,opt,name=watermark,proto3" json:"watermark,omitempty"`
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ziyunix_core_video_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_ziyunix_core_video_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_ziyunix_core_video_proto_rawDescGZIP(), []int{0}
}

func (x *Video) GetCodec() string {
	if x != nil {
		return x.Codec
	}
	return ""
}

func (x *Video) GetFormat() media.Format {
	if x != nil {
		return x.Format
	}
	return media.Format_FORMAT_UNSPECIFIED
}

func (x *Video) GetBitrate() int32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *Video) GetFramerate() int32 {
	if x != nil {
		return x.Framerate
	}
	return 0
}

func (x *Video) GetQuality() *Quality {
	if x != nil {
		return x.Quality
	}
	return nil
}

func (x *Video) GetBuffer() int32 {
	if x != nil {
		return x.Buffer
	}
	return 0
}

func (x *Video) GetResolution() media.Resolution {
	if x != nil {
		return x.Resolution
	}
	return media.Resolution_RESOLUTION_UNSPECIFIED
}

func (x *Video) GetWatermark() *Watermark {
	if x != nil {
		return x.Watermark
	}
	return nil
}

var File_ziyunix_core_video_proto protoreflect.FileDescriptor

var file_ziyunix_core_video_proto_rawDesc = []byte{
	0x0a, 0x18, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x7a, 0x69, 0x79, 0x75,
	0x6e, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x21, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x7a,
	0x68, 0x61, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x7a, 0x69, 0x79, 0x75,
	0x6e, 0x69, 0x78, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x68, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x02, 0x0a,
	0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x30, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x7a, 0x68, 0x61, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x07, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69,
	0x78, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x7a, 0x68, 0x61, 0x6e, 0x67,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x72, 0x6b, 0x42, 0x32, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x7a, 0x69, 0x79, 0x75,
	0x6e, 0x69, 0x78, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x79, 0x75, 0x6e, 0x69, 0x78, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ziyunix_core_video_proto_rawDescOnce sync.Once
	file_ziyunix_core_video_proto_rawDescData = file_ziyunix_core_video_proto_rawDesc
)

func file_ziyunix_core_video_proto_rawDescGZIP() []byte {
	file_ziyunix_core_video_proto_rawDescOnce.Do(func() {
		file_ziyunix_core_video_proto_rawDescData = protoimpl.X.CompressGZIP(file_ziyunix_core_video_proto_rawDescData)
	})
	return file_ziyunix_core_video_proto_rawDescData
}

var file_ziyunix_core_video_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ziyunix_core_video_proto_goTypes = []interface{}{
	(*Video)(nil),         // 0: ziyunix.core.Video
	(media.Format)(0),     // 1: storezhang.media.Format
	(*Quality)(nil),       // 2: ziyunix.core.Quality
	(media.Resolution)(0), // 3: storezhang.media.Resolution
	(*Watermark)(nil),     // 4: ziyunix.core.Watermark
}
var file_ziyunix_core_video_proto_depIdxs = []int32{
	1, // 0: ziyunix.core.Video.format:type_name -> storezhang.media.Format
	2, // 1: ziyunix.core.Video.quality:type_name -> ziyunix.core.Quality
	3, // 2: ziyunix.core.Video.resolution:type_name -> storezhang.media.Resolution
	4, // 3: ziyunix.core.Video.watermark:type_name -> ziyunix.core.Watermark
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_ziyunix_core_video_proto_init() }
func file_ziyunix_core_video_proto_init() {
	if File_ziyunix_core_video_proto != nil {
		return
	}
	file_ziyunix_core_hls_proto_init()
	file_ziyunix_core_quality_proto_init()
	file_ziyunix_core_watermark_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ziyunix_core_video_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ziyunix_core_video_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ziyunix_core_video_proto_goTypes,
		DependencyIndexes: file_ziyunix_core_video_proto_depIdxs,
		MessageInfos:      file_ziyunix_core_video_proto_msgTypes,
	}.Build()
	File_ziyunix_core_video_proto = out.File
	file_ziyunix_core_video_proto_rawDesc = nil
	file_ziyunix_core_video_proto_goTypes = nil
	file_ziyunix_core_video_proto_depIdxs = nil
}
